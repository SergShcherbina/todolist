import { ResultCode, todolistAPI, TodolistApiType } from "api/todolist-api";
import { Dispatch } from "redux";
import { appActions, RequestStatusType } from "app/app-reducer";
import { handleServerAppError, handleServerNetworkError } from "utils/error.utils";
import { FilterValuesType } from "./Todolist/Todolist";
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { fetchTasksTC } from "features/todolistList/tasks-reducer";
import { createAppAsyncThunk } from "utils/createAppAsynkThunk";

export type TodolistType = {
  id: string;
  title: string;
  filter: FilterValuesType;
  entityStatus: RequestStatusType;
};

const initialState: TodolistType[] = [];

const slice = createSlice({
  name: "todos",
  initialState,
  reducers: {
    clearTodos: (state) => {
      state.splice(0);
    },
    changeTodolistFilterAC: (state, action: PayloadAction<{ todoId: string; filter: FilterValuesType }>) => {
      state.forEach((tl) => (tl.id === action.payload.todoId ? (tl.filter = action.payload.filter) : tl));
    },
    entityStatusAC: (state, action: PayloadAction<{ todoId: string; entityStatus: RequestStatusType }>) => {
      state.forEach((tl) => (tl.id === action.payload.todoId ? (tl.entityStatus = action.payload.entityStatus) : tl));
    },
  },
  extraReducers: (builder) => {
    //—Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ thunk —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é createAsyncThunk
    builder
      .addCase(setTodosTC.fulfilled, (state, action) => {
        return action.payload.map((td) => ({ ...td, filter: "all", entityStatus: "idle" }));
      })
      .addCase(addTodoTC.fulfilled, (state, action) => {
        state.unshift({ ...action.payload.todo, filter: "all", entityStatus: "idle" });
      })
      .addCase(removeTodoTC.fulfilled, (state, action) => {
        const index = state.findIndex((tl) => tl.id === action.payload.todoId); //–∏—â–µ–º –∏–Ω–¥–µ–∫—Å —Ç—É–¥—É–ª–∏—Å—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ
        state.splice(index, 1); //–ø–æ –∏–Ω–¥–µ–∫—Å—É —É–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
      })
      .addCase(changeTodoTitleTC.fulfilled, (state, action) => {
        state.forEach((tl) => (tl.id === action.payload.todoId ? (tl.title = action.payload.title) : tl));
      });
  },
});

//thunk RTK –∏—Å–ø–æ–ª—å–∑—É—è createAsyncThunk
//–ê–†–ì–£–ú–ï–ù–¢–´: 1 - prefix (–∏–º—è slice –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–Ω–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏), //2 - callback (—É—Å–ª–æ–≤–Ω–æ –Ω–∞—à–∞ —Å—Ç–∞—Ä–∞—è —Å–∞–Ω–∫–∞)
const setTodosTC = createAppAsyncThunk("todolist/setTodolist", async (arg, thunkAPI) => {
  const { dispatch, rejectWithValue } = thunkAPI;
  dispatch(appActions.appSetLoadingStatus("loading"));

  try {
    const res = await todolistAPI.getTodolists();
    const todos = res.data;
    dispatch(appActions.appSetLoadingStatus("succeeded"));
    todos.forEach((t) => {
      dispatch(fetchTasksTC(t.id));
    });
    return todos;
  } catch (err: any) {
    handleServerNetworkError(err, dispatch);
    return rejectWithValue(null);
  }
});

//–¢–ò–ü–ò–ó–ê–¶–ò–Ø: 1—á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç thunk, 2—á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ thunk, 3–≤–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –≤ rejectWithValue
//—Ç–∞–∫ –∫–∞–∫ –æ–±–µ—Ä–Ω—É–ª–∏ –≤ createAppAsyncThunk —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const addTodoTC = createAppAsyncThunk<{ todo: TodolistApiType }, string>("todos/addTodos", async (arg, thunkApi) => {
  const { dispatch, rejectWithValue } = thunkApi; //thunkAPI –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥ –∏–∑ RTK
  dispatch(appActions.appSetLoadingStatus("loading"));
  try {
    const res = await todolistAPI.createTodolist(arg);

    if (res.data.resultCode === ResultCode.COMPLETED) {
      dispatch(appActions.appSetLoadingStatus("succeeded"));
      return { todo: res.data.data.item }; //–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–û–ó–í–†–ê–©–ê–ï–ú –î–ê–ù–ù–´–ï
    } else {
      handleServerAppError(res, dispatch); //–≤—ã–Ω–µ—Å–ª–∏ –∫—É—Å–æ–∫ –∫–æ–¥–∞ –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—É—é —Ñ-—é
      return rejectWithValue(null);
    }
  } catch (err) {
    handleServerNetworkError(err, dispatch); //–≤—ã–Ω–µ—Å–ª–∏ –∫—É—Å–æ–∫ –∫–æ–¥–∞ –≤ —Ñ-—é
    return rejectWithValue(null); //–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —É–ø–∞–∫–æ–≤–∞–Ω–Ω—É—é –≤ rejectWithValue
  } //—Ç–æ—á–Ω–µ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ-–∏ handleServerNetworkError
});

const removeTodoTC = createAppAsyncThunk<{ todoId: string }, string>(
  "todos/removeTodos",
  async (todoId: string, thunkAPI) => {
    const { dispatch, rejectWithValue } = thunkAPI;
    dispatch(appActions.appSetLoadingStatus("loading")); //–∑–∞–ø—É—Å–∫ —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    dispatch(todosActions.entityStatusAC({ todoId, entityStatus: "loading" })); //–¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∑–µ–π–±–ª–∏–º –∫–Ω —É–¥–∞–ª–µ–Ω–∏—è

    try {
      const res = await todolistAPI.deleteTodolist(todoId);
      if (res.data.resultCode === ResultCode.COMPLETED) {
        //–µ—Å–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–¥–µ—Ç –ø–æ–ª–æ–∂ –∫–æ–¥(–¥–æ–∫–∏ API), enum
        dispatch(appActions.appSetLoadingStatus("succeeded"));
        return { todoId };
      } else {
        //–≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ (–æ—à–∏–±–∫–∞):
        if (res.data.messages.length > 0) {
          //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏
          dispatch(appActions.appSetError(res.data.messages[0])); //–¥–∏—Å–ø–∞—Ç—á–∏–º –µ–≥–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
        } else {
          dispatch(appActions.appSetError("error + üò†")); //–¥–∏—Å–ø–∞—Ç—á–∏–º —Å–≤–æ–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        }
        dispatch(appActions.appSetLoadingStatus("failed")); //–¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏(—É–±–∏—Ä–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä)
        return rejectWithValue(null);
      }
    } catch (err: any) {
      // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å —Å–æ–∏–¥-–µ–º –∏–Ω—Ç–µ-—Ç–∞
      dispatch(appActions.appSetError(err.message + " üò†")); //–¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
      dispatch(appActions.appSetLoadingStatus("failed")); //–¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏(—É–±–∏—Ä–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä)
      return rejectWithValue(null);
    } finally {
      dispatch(todosActions.entityStatusAC({ todoId, entityStatus: "idle" })); //–¥–∏—Å–ø–∞—Ç—á–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–¥–∏–∑–µ–π–±–ª –∫–Ω —É–¥–∞–ª–µ–Ω–∏—è
    }
  }
);

export const changeTodoTitleTC = createAppAsyncThunk<
  { todoId: string; title: string },
  { todoId: string; title: string }
>("todos/updateTodoTc", async (arg, thunkApi) => {
  const { dispatch, rejectWithValue } = thunkApi;
  dispatch(appActions.appSetLoadingStatus("loading"));

  try {
    const res = await todolistAPI.updateTodolist(arg.todoId, arg.title);
    if (res.data.resultCode === 0) {
      dispatch(appActions.appSetLoadingStatus("succeeded"));
      return { todoId: arg.todoId, title: arg.title };
    } else {
      handleServerAppError(res, dispatch);
      return rejectWithValue(null);
    }
  } catch (err) {
    handleServerNetworkError(err, dispatch);
    return rejectWithValue(null);
  }
});

export const todosReducer = slice.reducer;
export const todosActions = slice.actions;
export const todosThunk = { setTodosTC, removeTodoTC, addTodoTC: addTodoTC, changeTodoTitleTC };
